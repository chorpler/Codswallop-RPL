(Two runtime enhancements: a nicer single stepper, and a nicer error
 traceback routine.)

(A nicer single stepper using our type coloring routines.)
:: COLOR.COLOROBJ
  :: COLOR.CLEAR "(Depth " + COLOR.ANSIBRITE + depth + COLOR.ANSINORMAL + 
    ") Single step evaluated: " + obj + DISP
    COLOR.STACK
    "Enter to step, break, shell, or resume: " 
    #1 DEDCONT PROMPT #0 DEDCONT 
    { { :: "b" == ISDED OR ; :: "SST break" 'DED' BEVAL (bail just from here) ; }
      { :: "s" == ;          REPL }
      { :: "r" == ;          (keep on truckin') }
      { :: DROP #1 ;         SST } } 
    KCASE ;
  { obj depth } LOCAL ;
'STEP' STO

(Here's a much cleaner error traceback thing too.)

::
  (First, let the user know their sins have caught up with them.)
  "" DISP "You have died of dysentery." DISP "" DISP
  
  (Hang onto the length of our call stack as 'size'.)
  DUP LEN

  (And include an 'abbrev' routine to return an abbreviated string version
   of an object.)
  :: 
    (Keep our object and also find out what its type number is.)
    DUP TYPE
    { { :: Types.Code == ; :: DROP ":: ... ;" ; }
      { :: Types.List == ; :: DROP "{ ... }" ; }
      { :: Types.Tag == ; 
        :: OBJ> >FUNC SWAP DROP ":" SWAP + ":..." + ; } 
      { :: DROP #1 ; >STR } }
    KCASE ; 

  ::  
    (If there are too many calls, skip the oldest ones and find our
     starting index.  Otherwise our start index is 0.)
    size COLOR.stacklimit >
    :: size COLOR.stacklimit - DUP " ( +" SWAP + " lines )" + DISP ;
    #0 IFTE

    (Show our calls, if any.)
    ::
      (Now, for each call we're going to show, make an abbreviated printable
       version of each code block.)
      ::
        :: (Make a heading and leave it on the stack.)
          COLOR.ANSIBRITE "In call " + size index - + ": " + 
          COLOR.ANSINORMAL + ":: " +
          (Then grab our line and break it up into little giblets!)
          core index GET OBJ> DROP
          ::
            :: (Get each object for our current code block in turn and make a
                string.  Recall 'code' so it doesn't just run here!)
              'code' RCL index GET abbrev
              (Now, if our instruction pointer matches the index, highlight
               it!)
              index ip ==
              :: #9 COLOR.XTFORE SWAP + COLOR.ANSINORMAL + ;
              IFT
              (Then add a space, and increment our index til we're done.)
              + " " +
              index #1 + DUP 'index' STO 'code' RCL LEN < ;
            REP ; 
          { ip code :index:#0 } LOCAL
          (And add our closing semicolon and show this whole built-up line.)
          ";" + DISP
          (Increment our index and see if we're at the end.)
          index #1 + DUP 'index' STO size < ;
        REP ; 
      { index } LOCAL ;
    :: "You were not doing anything particular at the time." DISP ;
    IFTE

    (And now that we've printed as much traceback as we're going to do, it's
     time to say what actually went wrong.)
    "" DISP
    "The complaint leveled against you by " complainant + " is as follows:" +
    DISP reason DISP ;
  { abbrev size core reason complainant } LOCAL ;

{} STATIC
'ERRTRACE' STO
