#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Using Codswallop RPL
\end_layout

\begin_layout Author
ian Butler
\end_layout

\begin_layout Date
May 2023
\end_layout

\begin_layout Part
Theory and Overview
\end_layout

\begin_layout Section
What is RPL?
\end_layout

\begin_layout Standard
Codswallop RPL is based loosely on Hewlett-Packard's Reverse Polish Lisp,
 a language and operating system used in their 28 and 48 series calculators.
 RPL is a Forth-like language with Lisp characteristics such as robust support
 for lists and a bewildering quantity of delimiters, as well as strong typing
 and a number of data types.
 The Codswallop dialect is simplified in certain respects and improved in
 others; it retains the leisurely pace of execution of HP's implementation,
 particularly in its current form as written in Python.
\end_layout

\begin_layout Standard
Codswallop RPL is for amusement only.
 In this document, RPL refers specifically to this dialect and not HP's
 version, to which it may or may not apply.
\end_layout

\begin_layout Subsection
Everything is an object
\end_layout

\begin_layout Standard
RPL is a collection of objects, first and foremost.
 They are not objects in the paradigm of having extendable, attached methods,
 but they are all capable of evaluating themselves, and they have some printable
 form.
 Stringing together objects is the fundamental way RPL programs are created.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.37
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Hello, world.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quoted symbol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'FOO'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unquoted symbol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BAR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(This does nothing)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Built-in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<internal>
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:foo: #13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[directory]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{ #13 13.37 { 'FOO' } }
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:: #2 #2 + DISP ;
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Integers
\end_layout

\begin_layout Standard
Integers are represented as a number with a preceding pound sign.
 These can be freely mixed with floating-point numbers in math operations,
 and are typically used for counting and list indices.
 In a bare-metal implementation, their width would likely be equal to the
 word size of the machine; in the Python implementation, it's whatever Python
 integers are.
\end_layout

\begin_layout Subsubsection
Floats
\end_layout

\begin_layout Standard
Floating-point numbers are the default for any number the parser encounters.
 Currently they will cause an error if they're used as a list index; it
 is possible a future implementation could try to coerce a float into an
 integer first.
\end_layout

\begin_layout Subsubsection
Strings
\end_layout

\begin_layout Standard
Strings can contain anything other than a quotation mark, including newlines
 and whitespace and all manner of whatnottery.
 They cannot be properly represented if they contain a quotation mark, though
 enterprising individuals may certainly weasel such characters into a string
 to be used for display purposes.
 While not a composite object, some composite commands will work on strings,
 which can be used to slice and manipulate them.
\end_layout

\begin_layout Subsubsection
Quoted symbol
\end_layout

\begin_layout Standard
A name within single quotes is a quoted symbol: it will happily sit on the
 stack and wait to be called upon.
 It's used to reference an object in named storage without immediately evaluatin
g it.
 Quoted symbols can themselves be stored; however, circular references will
 cause an error:
\end_layout

\begin_layout LyX-Code
:: 'x' 'x' STO ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

You have died of dysentery.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

in object 2 of :: 'x' 'x' 
\emph on
 STO 
\emph default
 ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The complaint leveled against you by STO is as follows: 
\end_layout

\begin_layout LyX-Code
cDonalds Theorem does not apply to symbolic references 
\end_layout

\begin_layout Subsubsection
Unquoted symbol
\end_layout

\begin_layout Standard
An unquoted symbol is any symbol without quotes.
 When encountered in a program, it is recalled from the named store and
 evaluated immediately.
\end_layout

\begin_layout Subsubsection
Preprocessed object
\end_layout

\begin_layout Standard
The parser catches any unquoted symbol beginning with a grave (`); it will
 attempt to recall such a symbol (sans grave), and return either that object
 or a grave-free unquoted symbol if the object doesn't exist.
 This is useful for including named constants in lists and code.
\end_layout

\begin_layout Subsubsection
Comment
\end_layout

\begin_layout Standard
A comment follows the same rules as a string, but delimited by parentheses
 instead of quotation marks.
 However, when evaluating itself, a comment disappears; comments cannot
 readily be recalled to the stack.
 They are objects, and take up space in lists and code.
\end_layout

\begin_layout Subsubsection
Built-in
\end_layout

\begin_layout Standard
A built-in object is a command which behaves like an unquoted symbol.
 When recalled, it returns an unquoted symbol representing itself.
 Built-ins may provide additional hints for their usage and arguments, and
 as regular objects in the named store, they can also be erased (at your
 peril.) They can dispatch differently according to the types of arguments
 expected.
\end_layout

\begin_layout Subsubsection
Internal
\end_layout

\begin_layout Standard
Internals are the thinnest wrapper around a machine call (currently, a Python
 function call) which executes when evaluated.
 They are not readily accessible and are a good way to crash the interpreter.
\end_layout

\begin_layout Subsubsection
Tag
\end_layout

\begin_layout Standard
Tags are special mutable pairs, containing a simple symbol name (without
 subdirectories) and an arbitrary object.
 Tags can be used as references for argument passing, and for other purposes.
\end_layout

\begin_layout Subsubsection
Directory
\end_layout

\begin_layout Standard
Directories are a special type of linked list which are the basis for named
 storage.
 Each directory entry contains a tag and a link to the next directory entry,
 if any.
 Generally, these entries aren't used directly, but a complete directory
 can be retrieved.
\end_layout

\begin_layout Subsubsection
Lists
\end_layout

\begin_layout Standard
Lists are the fundamental plural data type in RPL.
 They can be of any size, and contain any object, including other lists.
 They can be fully manipulated: individual elements can be retrieved or
 replaced, objects can be appended to it, and subsets of the list can be
 extracted.
 Lists return themselves when evaluated.
 List indices begin at zero.
\end_layout

\begin_layout Subsubsection
Code
\end_layout

\begin_layout Standard
Code is heavily based upon the list.
 Like lists, they can be fully manipulated and can contain any type of object.
 Instead of returning themselves when evaluated, they evaluate each of their
 objects in turn from start to finish.
 While there is no explicit flow control, there are built-ins and library
 objects which provide this functionality.
\end_layout

\begin_layout Subsection
Objects live in several places
\end_layout

\begin_layout Subsubsection
The stack
\end_layout

\begin_layout Standard
When an object is evaluated, it typically returns a copy of itself to the
 data stack.
 The stack is a special list to which any object can be pushed, and from
 which all functions take their arguments.
 It is shared universally and can grow to any size.
 For example, evaluating #2, and then evaluating #2 once more will cause
 the stack to contain both values:
\end_layout

\begin_layout LyX-Code
{ #2 #2 }
\end_layout

\begin_layout Standard
With those two items on the stack, evaluating the built-in + will consume
 both items and return a result:
\end_layout

\begin_layout LyX-Code
{ #4 }
\end_layout

\begin_layout Standard
The stack can be cleared, items duplicated, swapped around, stored, printed,
 and so on.
 It is the general scratch workspace for temporary storage of all manner
 of objects.
\end_layout

\begin_layout Subsubsection
Named store
\end_layout

\begin_layout Standard
Any object which can be placed on the stack (that is, any object except
 the stack itself) can also be assigned a name, stored for later recall.
 This name may start with anything except a number or a delimiter, and may
 contain anything except a delimiter.
 For example, to store the integer 5 into a variable named x, one places
 the integer object on the stack, and the quoted symbol x, and executes
 the command STO:
\end_layout

\begin_layout LyX-Code
:: #5 'x' STO ;
\end_layout

\begin_layout Standard
Evaluating an object from the named store can be as simple as mentioning
 the object as an unquoted symbol.
\end_layout

\begin_layout Subsubsection
Hierarchical named store
\end_layout

\begin_layout Standard
Each code object can also be assigned local variables.
 These names will cover any identical names further down the call stack,
 all the way to the global set of variables; they must be defined before
 the code is executed, and they disappear when evaluation of the code object
 is complete.
 More information on this behavior can be found in the section covering
 the LOCAL command.
\end_layout

\begin_layout Subsubsection
Subdirectories
\end_layout

\begin_layout Standard
The basic building block of the named store is an object called a directory
 entry, a number of which form a linked list.
 Directory entries can also be created and stored by name, which can then
 have additional entries.
 These subdirectories can be stored to and recalled from with the familiar
 dot notation, for example:
\end_layout

\begin_layout LyX-Code
:: MKDIR 'numbers' STO #5 'numbers.five' STO ;
\end_layout

\begin_layout Standard
will store an integer 5 to the name 'five', within a new subdirectory named
 'numbers', where it can be recalled with 'numbers.five'.
 Additional things could be stored into the subdirectory similarly:
\end_layout

\begin_layout LyX-Code
:: #6 'numbers.six' STO ;
\end_layout

\begin_layout Subsubsection
The ether
\end_layout

\begin_layout Standard
Code blocks currently being executed exist only in the ether (that is, on
 the call stack.) They are in memory, but are inaccessible except for the
 most current context, and cannot be modified; they disappear entirely along
 with their local variables when evaluation is complete.
 However, code can be freely modified before it is evaluated; you can see
 the section Building Code for more details.
\end_layout

\begin_layout Standard
Objects referenced by accessible lists, code, or directory entries (even
 entries no longer in the named store) also persist for as long as necessary.
\end_layout

\begin_layout Subsection
First steps.
\end_layout

\begin_layout Subsubsection
Starting the Python-based interpreter
\end_layout

\begin_layout Standard
The interpreter will run in Python 3.
 You can type
\end_layout

\begin_layout LyX-Code
$ python3 rpl.py
\end_layout

\begin_layout Standard
to start the interpreter, which will bring you to the prompt:
\end_layout

\begin_layout LyX-Code
Codswallop RPL
\end_layout

\begin_layout LyX-Code
:: 
\end_layout

\begin_layout Standard
From here, you may type in any valid RPL code.
 Newlines are supported when typing directly into the interpreter by typing
 a backslash as the last character before pressing enter.
 The trailing semicolon is automatically appended.
 For example, when evaluating 2+2:
\end_layout

\begin_layout LyX-Code
$ python3 rpl.py
\end_layout

\begin_layout LyX-Code
Codswallop RPL
\end_layout

\begin_layout LyX-Code
:: #2 #2 +
\end_layout

\begin_layout LyX-Code
Stack: { #4 }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
You may exit at any time by typing Ctrl-C or your operating system's end
 of file character (typically Ctrl-D or Ctrl-Z.) Typing Ctrl-C while code
 is executing will start a traceback and return to the REPL, if one was
 running.
 If your system has readline, you'll have familiar editing keys and a command
 history.
\end_layout

\begin_layout Subsubsection
Common stack manipulation
\end_layout

\begin_layout Standard
It's very common to manipulate the stack in several ways.
 The most common are DUP and DROP; DUP will duplicate the first level of
 the stack, and DROP will remove the most recent item from it.
 You can also switch the two most recent items around with SWAP:
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #2 DUP
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #2 #2 }
\end_layout

\begin_layout LyX-Code
:: DROP
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #2 }
\end_layout

\begin_layout LyX-Code
:: #3
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #2 #3 }
\end_layout

\begin_layout LyX-Code
:: SWAP
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #3 #2 }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
Finally, you can clear both the data and call stacks with CLR, which will
 leave the global named store untouched but will end any running program.
 This includes the code block CLR is in; anything after it will be gleefully
 ignored:
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello!
\begin_inset Quotes erd
\end_inset

 #3 #2 }
\end_layout

\begin_layout LyX-Code
:: CLR 
\begin_inset Quotes eld
\end_inset

Gentlemen!
\begin_inset Quotes erd
\end_inset

 #5 3.14
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Subsubsection
Your first program
\end_layout

\begin_layout Standard
Of course your first program should be a friendly hello.
 You could type it and evaluate it immediately:
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

Hello, world!
\begin_inset Quotes erd
\end_inset

 DISP
\end_layout

\begin_layout LyX-Code
Hello, world!
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
But of course, such savory appellations are best stored and enjoyed later,
 and again and again.
 So instead of typing a program to be evaluated, let us instead type code
 which will stay on the stack for a moment:
\end_layout

\begin_layout LyX-Code
:: :: 
\begin_inset Quotes eld
\end_inset

Hello, world!
\begin_inset Quotes erd
\end_inset

 DISP ;
\end_layout

\begin_layout LyX-Code
Stack: { :: 
\begin_inset Quotes eld
\end_inset

Hello, world!
\begin_inset Quotes erd
\end_inset

 DISP ; }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
And then we can put it in our named store under a friendly name, and just
 call it as we please:
\end_layout

\begin_layout LyX-Code
:: 'hi!' STO
\end_layout

\begin_layout LyX-Code
Stack { }
\end_layout

\begin_layout LyX-Code
:: hi!
\end_layout

\begin_layout LyX-Code
Hello, world!
\end_layout

\begin_layout LyX-Code
Stack { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
You may even store it to disk, so you may enjoy the greeting yet a second
 time.
\end_layout

\begin_layout LyX-Code
:: 'hi!' 
\begin_inset Quotes eld
\end_inset

hullo.rpl
\begin_inset Quotes erd
\end_inset

 >DSK
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: ^C
\end_layout

\begin_layout LyX-Code
$ python3 rpl.py
\end_layout

\begin_layout LyX-Code
Codswallop RPL
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

hullo.rpl
\begin_inset Quotes erd
\end_inset

 DSK> hi!
\end_layout

\begin_layout LyX-Code
Hello, world!
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Subsubsection
A little more stack play
\end_layout

\begin_layout Standard
Sometimes you may wish to recall an object from the named store without
 evaluating it, for example to bring up a code object without it running.
 RCL can be used for this purpose:
\end_layout

\begin_layout LyX-Code
:: 'hi!' RCL
\end_layout

\begin_layout LyX-Code
Stack: { :: 
\begin_inset Quotes eld
\end_inset

Hello, world!
\begin_inset Quotes erd
\end_inset

 DISP ; }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
Once you have a program on the stack, you can evaluate it explicitly using
 EVAL:
\end_layout

\begin_layout LyX-Code
:: EVAL
\end_layout

\begin_layout LyX-Code
Hello, world!
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
This can be useful for many purposes, especially when code objects are stored
 in lists to be selected from and evaluated.
 EVAL will also recall and evaluate a quoted symbol, if it exists.
\end_layout

\begin_layout Subsubsection
Dealing with errors
\end_layout

\begin_layout Standard
You will probably make a lot of mistakes.
 There are two main types of errors you are likely to encounter: the first
 is when entering text to be turned into objects.
 For example, if you mistyped your first program, you might end up with
 the following exchange:
\end_layout

\begin_layout LyX-Code
:: "Hello, world!' DISP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Your plans to turn words into actions have fallen short.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

In particular, the string case says:
\end_layout

\begin_layout LyX-Code
End of string before end of string
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
If the parser fails to make heads or tails of your input, it will unhelpfully
 discard it entirely, and it is currently not very good at telling you exactly
 where it's failed.
 On the other hand, the interpreter itself will provide a comprehensive
 traceback of exactly where an error occurred, and why:
\end_layout

\begin_layout LyX-Code
:: :: x y + ; 'sum' STO
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: #3 'x' STO sum DISP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

You have died of dysentery.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

in object 3 of :: #3 'x' STO 
\emph on
 sum 
\emph default
 DISP ; 
\begin_inset Newline newline
\end_inset

in object 1 of :: x 
\emph on
 y 
\emph default
 + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The complaint leveled against you by the symbol resolver is as follows:
\end_layout

\begin_layout LyX-Code
We seek y but we cannot always find y 
\begin_inset Newline newline
\end_inset

Stack: { #3 }
\begin_inset Newline newline
\end_inset

:: 
\end_layout

\begin_layout Subsubsection
Exploring the named store
\end_layout

\begin_layout Standard
Other than this document, one way to look around in the interpreter to see
 what your options are is to use ?, which will display a list of the global
 symbols currently on offer.
 After you've found a name you're interested in, if it's a built-in, you
 can quote it and see what it has to say for itself with DOC:
\end_layout

\begin_layout LyX-Code
:: 'STO' DOC 
\end_layout

\begin_layout LyX-Code
Write an object into the named store, either to a 
\end_layout

\begin_layout LyX-Code
local variable if it exists, or to the main store.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

STO is looking for 2 arguments.
  For example: 
\end_layout

\begin_layout LyX-Code
Stack configuration 0:
\end_layout

\begin_layout LyX-Code
  Line 2: Any   
\end_layout

\begin_layout LyX-Code
  Line 1: Symbol 
\end_layout

\begin_layout Subsection
Managing the flow
\end_layout

\begin_layout Standard
Because code is a list of objects evaluated in order, it's not instantly
 obvious how flow control might work.
 However, code is also an object, and can be stored on the stack, which
 broadens the possibilities significantly.
\end_layout

\begin_layout Subsubsection
Function calls
\end_layout

\begin_layout Subsubsection
If-then blocks
\end_layout

\begin_layout Standard
Consider this Python if-then statement about cakes:
\end_layout

\begin_layout LyX-Code
lexcakes = 40
\end_layout

\begin_layout LyX-Code
if lexcakes >= 40:
\end_layout

\begin_layout LyX-Code
  print(
\begin_inset Quotes eld
\end_inset

That's terrible!
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
  sadness = 1
\end_layout

\begin_layout Standard
Of course we can perform the assignment and the test for this statement
 easily in RPL:
\end_layout

\begin_layout LyX-Code
:: #40 'lexcakes' STO
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: lexcakes #40 >=
\end_layout

\begin_layout LyX-Code
Stack: { #1 }
\end_layout

\begin_layout Standard
Now that we've performed the test, instead of executing our sadness code
 outright, we can leave it on the stack in the form of a complete code block.
\end_layout

\begin_layout LyX-Code
:: :: 
\begin_inset Quotes eld
\end_inset

That's terrible!
\begin_inset Quotes erd
\end_inset

 DISP #1 'sadness' STO ;
\end_layout

\begin_layout LyX-Code
Stack: { #1 :: 
\begin_inset Quotes eld
\end_inset

That's terrible!
\begin_inset Quotes erd
\end_inset

 DISP #1 'sadness' STO ; }
\end_layout

\begin_layout Standard
With these two items in place, we can use the command IFT, which will consume
 both our test value and the code object, and evaluate the latter if the
 statement is true:
\end_layout

\begin_layout LyX-Code
:: IFT
\end_layout

\begin_layout LyX-Code
That's terrible!
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout Standard
As with many things in RPL, the object to evaluated does not have to be
 of any particular type.
 In addition, a useful variant of this command is IFTE, if-then-else, which
 takes three arguments instead of two, and evaluates the second or third
 based upon the test value:
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

That's 
\begin_inset Quotes erd
\end_inset

 lexcakes #40 >=
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

That's 
\begin_inset Quotes erd
\end_inset

 #1 }
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

terrible!
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

not so bad I suppose...
\begin_inset Quotes erd
\end_inset

 IFTE
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

That's 
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

terrible!
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
:: + DISP
\end_layout

\begin_layout LyX-Code
That's terrible!
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout Subsubsection
CASE and KCASE
\end_layout

\begin_layout Standard
If you have a cascade of if-then-else blocks, a better way might be to use
 CASE or KCASE.
 The standard library contains these two versions of a case construct, which
 iterate instead of nesting.
 They both take a list in the following format:
\end_layout

\begin_layout LyX-Code
{ { if-case then-case }
\end_layout

\begin_layout LyX-Code
  { if-case then-case }
\end_layout

\begin_layout LyX-Code
  ...
 }
\end_layout

\begin_layout Standard
CASE is exactly equivalent to a series of if-then statements; KCASE is similar,
 but accepts a constant which is memorized and pushed to the stack before
 each if-case is evaluated; it can also be recalled from either block as
 
\emph on
_k
\emph default
.
 The first if-case to return a nonzero result has its then-case evaluated,
 and no additional cases are matched.
 These functions support tail calls from then-case blocks.
 As demonstrated here, you can make an 
\begin_inset Quotes eld
\end_inset

else
\begin_inset Quotes erd
\end_inset

 case out of your last entry by making sure it always returns a nonzero
 result: 
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

That's 
\begin_inset Quotes erd
\end_inset

 lexcakes
\end_layout

\begin_layout LyX-Code
  { { :: 0 < ; 
\begin_inset Quotes eld
\end_inset

highly unlikely.
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
    { :: 3 <= ; 
\begin_inset Quotes eld
\end_inset

a completely reasonable number.
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
    { :: 39 < ; 
\begin_inset Quotes eld
\end_inset

a suspicious number of cakes.
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
    { :: DROP #1 ; 
\begin_inset Quotes eld
\end_inset

terrible!
\begin_inset Quotes erd
\end_inset

 } }
\end_layout

\begin_layout LyX-Code
  KCASE + DISP ;
\end_layout

\begin_layout Subsubsection
Looping
\end_layout

\begin_layout Standard
There is no atomic looping construct.
 The standard library does include an object called REP, which will evaluate
 a code object repeatedly until it returns zero.
 This can be used for any sort of 
\begin_inset Quotes eld
\end_inset

while
\begin_inset Quotes erd
\end_inset

 type loop.
 It can also be pressed into service as both an anonymous counter:
\end_layout

\begin_layout LyX-Code
:: #1 :: DUP DISP #1 + DUP #3 <= ; REP
\end_layout

\begin_layout LyX-Code
1
\end_layout

\begin_layout LyX-Code
2
\end_layout

\begin_layout LyX-Code
3
\end_layout

\begin_layout LyX-Code
Stack: { #4 }
\end_layout

\begin_layout Standard
and a for-next style loop, using named storage:
\end_layout

\begin_layout LyX-Code
:: #1 'x' STO
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: :: x DISP x #1 + DUP 'x' STO #3 <= ; REP
\end_layout

\begin_layout LyX-Code
1
\end_layout

\begin_layout LyX-Code
2
\end_layout

\begin_layout LyX-Code
3
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: 'x' DISP
\end_layout

\begin_layout LyX-Code
4
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout Subsubsection
Slowing it down
\end_layout

\begin_layout Standard
Because each code object is evaluated in order, and because the state of
 the stack is relevant to successive operations, it can be extremely helpful
 to single step through a program for debugging purposes.
 Single stepping can be started with the command SST, which will cause the
 interpreter to prompt after every command is executed, without clearing
 the call stack.
 SST can also be called from within a program to assist in debugging a problem
 section.
 Pressing enter repeatedly will cause successive objects to be evaluated,
 showing the stack state and the object that's been evaluated each time.
\end_layout

\begin_layout LyX-Code
:: #9 'num' STO 
\begin_inset Quotes eld
\end_inset

You have played 
\begin_inset Quotes erd
\end_inset

 num 
\begin_inset Quotes eld
\end_inset

 times
\begin_inset Quotes erd
\end_inset

 SST + DISP
\end_layout

\begin_layout LyX-Code
Single step mode is True 
\end_layout

\begin_layout LyX-Code
Single step evaluated: SST
\end_layout

\begin_layout LyX-Code
Call stack depth: 2
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
Resume, break, shell, or enter to step:
\end_layout

\begin_layout LyX-Code
Single step evaluated: + 
\end_layout

\begin_layout LyX-Code
Call stack depth: 2 
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

You have played 
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

9 times
\begin_inset Quotes erd
\end_inset

 } 
\end_layout

\begin_layout LyX-Code
Resume, break, shell, or enter to step:
\end_layout

\begin_layout LyX-Code
9 times 
\end_layout

\begin_layout LyX-Code
Single step evaluated: DISP 
\end_layout

\begin_layout LyX-Code
Call stack depth: 2 
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

You have played 
\begin_inset Quotes erd
\end_inset

 } 
\end_layout

\begin_layout LyX-Code
Resume, break, shell, or enter to step: r
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

You have played 
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
::  
\end_layout

\begin_layout Standard
An important feature of single stepping is being able to launch a shell
 at any point.
 This will evaluate REPL (if it exists), without clearing the call stack
 or local variables, so the whole machine state can be examined and modified.
 As soon as the REPL is dismissed (with ^D/^C or BAIL) the program continues.
 The break option (
\begin_inset Quotes eld
\end_inset

b
\begin_inset Quotes erd
\end_inset

 or ^C) will stop execution with a traceback.
\end_layout

\begin_layout Subsection
Working with lists
\end_layout

\begin_layout Standard
Lists are general-purpose containers into which any object or set of objects
 can be placed, and there are a few useful built-ins for dealing with them.
\end_layout

\begin_layout Subsubsection
GET and PUT
\end_layout

\begin_layout Standard
You can retrieve a single item from a list, if it exists, or store a single
 item to a list (if the list is already an appropriate size) with GET and
 PUT:
\end_layout

\begin_layout LyX-Code
:: { 1 2 3 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 } #3 GET
\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
:: { 1 2 3 4 }
\end_layout

\begin_layout LyX-Code
Stack: { { 1.0 2.0 3.0 4.0 } }
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 #2 PUT
\end_layout

\begin_layout LyX-Code
Stack: { { 1.0 2.0 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 4.0 } }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Subsubsection
SUBS, LEFT, and RIGHT
\end_layout

\begin_layout Standard
To retrieve a subset of a list, place the list on the stack with starting
 and ending integer subscripts to receive your prize:
\end_layout

\begin_layout LyX-Code
:: { 1 2 3 4 5 6 }
\end_layout

\begin_layout LyX-Code
Stack: { { 1.0 2.0 3.0 4.0 5.0 6.0 } }
\end_layout

\begin_layout LyX-Code
:: #2 #3 SUBS
\end_layout

\begin_layout LyX-Code
Stack: { { 3.0 4.0 } }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
All three functions work with strings as well as lists:
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

left
\begin_inset Quotes erd
\end_inset

 #2 LEFT 
\begin_inset Quotes eld
\end_inset

right
\begin_inset Quotes erd
\end_inset

 #3 RIGHT +
\end_layout

\begin_layout LyX-Code
Stack: 
\begin_inset Quotes eld
\end_inset

leght
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Adding and multiplying lists
\end_layout

\begin_layout Standard
You can append to a list with +, which will add a single object to a list:
\end_layout

\begin_layout LyX-Code
:: { 
\begin_inset Quotes eld
\end_inset

butcher
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

baker
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout LyX-Code
Stack: { { 
\begin_inset Quotes eld
\end_inset

butcher
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

baker
\begin_inset Quotes erd
\end_inset

 } }
\end_layout

\begin_layout LyX-Code
:: 
\begin_inset Quotes eld
\end_inset

candlestick maker
\begin_inset Quotes erd
\end_inset

 +
\end_layout

\begin_layout LyX-Code
Stack: { { 
\begin_inset Quotes eld
\end_inset

butcher
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

baker
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

candlestick maker
\begin_inset Quotes erd
\end_inset

 } }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
And you can also multiply a list's contents by an integer:
\end_layout

\begin_layout LyX-Code
:: { #1 #2 #3 }
\end_layout

\begin_layout LyX-Code
Stack: { { #1 #2 #3 } }
\end_layout

\begin_layout LyX-Code
:: #3 *
\end_layout

\begin_layout LyX-Code
Stack: { { #1 #2 #3 #1 #2 #3 #1 #2 #3 } }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Subsection
Descending into the deep
\end_layout

\begin_layout Standard
Since code is a type of data, some unexpected and interesting things can
 be done to it.
 It's also worth exploring how calls and returns are made internally, to
 see how optimizations can be made.
\end_layout

\begin_layout Subsubsection
The mysterious call stack
\end_layout

\begin_layout Standard
The call stack is not viewable from within RPL, but the interpreter depends
 upon it.
 Each line of the call stack contains three items:
\end_layout

\begin_layout Enumerate
The code object being evaluated
\end_layout

\begin_layout Enumerate
An index pointing to the next object to evaluate
\end_layout

\begin_layout Enumerate
The first local directory entry
\end_layout

\begin_layout Standard
Except when single-step mode is active, the interpreter continuously evaluates
 objects from the most recent context, discards that context when it reaches
 the end of the code, and returns to the :: prompt when it has fully cleared
 the call stack.
 When a line is typed in at the :: prompt, it's parsed into a code object
 and pushed onto the call stack for evaluation in the same manner.
\end_layout

\begin_layout Subsubsection
Introspection
\end_layout

\begin_layout Standard
It's possible to retrieve the currently running code, but it cannot be modified.
 This is sometimes useful for passing oneself as an argument.
\end_layout

\begin_layout LyX-Code
:: :: 
\begin_inset Quotes eld
\end_inset

Hello, world.
\begin_inset Quotes erd
\end_inset

 DISP SELF ; EVAL
\end_layout

\begin_layout LyX-Code
Hello, world.
\end_layout

\begin_layout LyX-Code
Stack: { :: 
\begin_inset Quotes eld
\end_inset

Hello, world.
\begin_inset Quotes erd
\end_inset

 DISP SELF ; }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
SELF EVAL can be used to recurse; if it occurs at the end of a code block,
 it is effectively a jump back to the first object.
\end_layout

\begin_layout Subsubsection
Tail call optimization
\end_layout

\begin_layout Standard
If you think about a program called minus that calls itself to count down
 to zero:
\end_layout

\begin_layout LyX-Code
:: DUP :: #1 - minus ; 
\begin_inset Quotes eld
\end_inset

Done!
\begin_inset Quotes erd
\end_inset

 IFTE ; 'minus' STO
\end_layout

\begin_layout Standard
It would seem that the call stack would quickly be buried, as each :: #1
 - minus ; block and each copy of minus would be appended as it recursed.
 However, each time a new code object is evaluated, it isn't blindly appended:
 if the current context is already at its last object, the new code replaces
 the old code on the current line.
 This optimization doesn't scrutinize too hard, though, so
\end_layout

\begin_layout LyX-Code
:: DUP :: #1 - minus ; 
\begin_inset Quotes eld
\end_inset

Done!
\begin_inset Quotes erd
\end_inset

 IFTE (Unoptimized!) ; 'minus' STO
\end_layout

\begin_layout Standard
will quickly fill up the call stack, even though the only object left to
 evaluate is a comment.
 It is not strictly a recursion optimization; any call at the end of a code
 object is effectively a jump, albeit one which retains the current storage
 context (see below).
\end_layout

\begin_layout Subsubsection
Named storage contexts
\end_layout

\begin_layout Standard
We've only looked so far at the global named store, but in fact, every time
 a new program is called, the first directory entry for the named store
 is attached to it, with local variables coming first.
 Whenever an object is stored or recalled, the interpreter starts by looking
 in the local store, and continues down through any further local stores
 until it reaches the global store.
 Local names can cover global names, or even local names from further-away
 contexts.
 STO will store to the nearest context that already has the name, and if
 it doesn't exist, it goes into the global store.
 Recalls will fail with an error if nobody has what they're looking for.
\end_layout

\begin_layout Standard
To make a local context, the objects to be stored are first placed upon
 the stack.
 A code object follows, and finally a list of names.
 The LOCAL command then creates a new context (or in the case of an optimized
 tail call, appends to the current context), assigning the objects remaining
 on the stack to the list of names by popping them one at a time.
 For example, to create a local context with a, b, and c containing the
 numbers 1, 2, and 3:
\end_layout

\begin_layout LyX-Code
:: #1 #2 #3 :: 
\begin_inset Quotes eld
\end_inset

It's easy as 
\begin_inset Quotes erd
\end_inset

 a + b + c + DISP ; { c b a } LOCAL
\end_layout

\begin_layout LyX-Code
It's easy as 123
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
Local contexts are often useful for named argument passing.
 In addition to symbols, it's sometimes useful (for example, when local
 variables are to be used for counters or other purposes unrelated to arguments)
 to use tags instead of putting an object on the stack.
 Either method can be freely mixed in a local variable list:
\end_layout

\begin_layout LyX-Code
:: #1 #3 :: 
\begin_inset Quotes eld
\end_inset

It's easy as 
\begin_inset Quotes eld
\end_inset

 a + b + c + DISP; { c :b:#2 a } LOCAL
\end_layout

\begin_layout LyX-Code
It's easy as 123
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Subsubsection
Dropping out of a context
\end_layout

\begin_layout Standard
A provision is made through the BAIL command to leave a context early.
 BAIL not only returns from the current context, but optimizes for returns
 much like calls are optimized.
 Therefore a BAIL at the end of an IFT or IFTE code object will not only
 leave its own context, but the one it's been called from (or more, if the
 IFT/IFTE is at the end of its own code block.)
\end_layout

\begin_layout LyX-Code
:: #1 'BAIL' IFT 
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: #1 :: BAIL ; IFT 
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: :: #1 :: BAIL ; IFT ; EVAL 
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: #1 :: BAIL (Unoptimized) ; IFT 
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
Stack: { 
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout Standard
Similarly, BEVAL can be used to bail from the current context or contexts
 and begin a new one; if used in the middle of a code block, it is effectively
 a jump, similar to a tail call.
\end_layout

\begin_layout Subsubsection
Building new code programmatically
\end_layout

\begin_layout Standard
Code is a special type of list, but it is a list, and you can build up blocks
 of code within a program before evaluating them.
 For example, if you wanted to roll a die of 
\emph on
x
\emph default
 sides, you might use a program like the following:
\end_layout

\begin_layout LyX-Code
:: RND x * 1 + >INT ; 'dieroll' STO
\end_layout

\begin_layout Standard
And if you wished to, for example, roll a die for even values of 
\emph on
x 
\emph default
from 6 to 10, you could produce a for-type loop:
\end_layout

\begin_layout LyX-Code
:: #6 'x' STO
\end_layout

\begin_layout LyX-Code
  :: RND x * 1 + >INT
\end_layout

\begin_layout LyX-Code
    x #2 + DUP 'x' STO #12 < ; 
\end_layout

\begin_layout LyX-Code
  REP ;
\end_layout

\begin_layout Standard
But what about two die rolls per loop? You could of course prepare an inner
 loop to count from 1 to 2, but you could also build your loop programatically
 (shown here as typed directly into the interpreter):
\end_layout

\begin_layout LyX-Code
:: #6 'x' STO
\end_layout

\begin_layout LyX-Code
Stack: { }
\end_layout

\begin_layout LyX-Code
:: :: RND x * 1 + >INT ;
\end_layout

\begin_layout LyX-Code
Stack: { :: RND x * 1 + >INT ; }
\end_layout

\begin_layout LyX-Code
:: #2 *
\end_layout

\begin_layout LyX-Code
Stack: { :: RND x * 1 + >INT RND x * 1 + >INT ; }
\end_layout

\begin_layout LyX-Code
::
\end_layout

\begin_layout Standard
If you multiply code by an integer, it will produce a new program with an
 arbitrary number of copies of the original concatenated, just as with multiplyi
ng lists.
 While this is fine, it does not actually prepare our loop.
 But we can add the looping construct by using + to concatenate two programs:
\end_layout

\begin_layout LyX-Code
:: :: x #2 + DUP 'x' STO #12 < ; +
\end_layout

\begin_layout LyX-Code
Stack: { :: RND x * 1 + >INT RND x * 1 + >INT x #2 + DUP 'x' STO #12 < ;
 }
\end_layout

\begin_layout Standard
And in this case use REP to execute our synthesized code.
\end_layout

\begin_layout Subsubsection
A study of types
\end_layout

\begin_layout Standard
Cods can have any number of object types, and there's no guarantee the type
 number returned by TYPE will be exactly the same from session to session,
 though type number won't change during a session.
 The Types directory contains information about which types are available.
 Each type's number is stored in Types.[type].
 For example, Types.Integer might contain #10.
 There is also a list, Types.n, to do the reverse; in this example, Types.n
 #10 GET will return 
\begin_inset Quotes eld
\end_inset

Integer
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
When building a builtin programmatically, it can be useful and much more
 legible to use the parser's ` shorthand to recall type numbers while they're
 being parsed.
 For example, an input of
\end_layout

\begin_layout LyX-Code
{ :: 
\begin_inset Quotes eld
\end_inset

Ignoring an integer
\begin_inset Quotes erd
\end_inset

 DISP DROP ; `Types.Integer }
\end_layout

\begin_layout Standard
will retrieve Types.Integer immediately during parsing and (for purposes
 of this example) yield
\end_layout

\begin_layout LyX-Code
{ :: 
\begin_inset Quotes eld
\end_inset

Ignoring an integer
\begin_inset Quotes erd
\end_inset

 DISP DROP; #10 }
\end_layout

\begin_layout Part
Function reference
\end_layout

\begin_layout Paragraph*
==, !=
\end_layout

\begin_layout Standard
Check two objects for equality or inequality.
 Equality is not restricted by type; congruent objects are matched, such
 as a symbol 'hello' and a string 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

.
 A directory entry will match any equivalent object to its name.
 Conversely, code and lists are equal only if they are the exact same object:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean result
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
<, <=, >, >=
\end_layout

\begin_layout Standard
Compare two numbers:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean result
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
+
\end_layout

\begin_layout Standard
Arithmetic addition:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
or if one is a float:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or concatenate an object with a string:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or add an item to a list:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or merge two blocks of code:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
-
\end_layout

\begin_layout Standard
Arithmetic subtraction:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
or if one is a float:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
*
\end_layout

\begin_layout Standard
Arithmetic multiplication:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
or if one is a float:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or duplicate a string, list, or code:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code * 
\emph on
n
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
ACCUM
\end_layout

\begin_layout Standard
A fundamentally bad idea: add an integer to another integer without generating
 a new object.
 This causes quantum entanglement: anywhere that integer object is found
 receives the new value, this is likely to cause unexpected results.
 It's also not any faster than regular addition, and should be removed.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Accumulator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Addend
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Accumulator
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
AND
\end_layout

\begin_layout Standard
Logical AND, returning #1 if both numbers are nonzero:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>ASC
\end_layout

\begin_layout Standard
Return the character of a valid Unicode number:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Character number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
ASC>
\end_layout

\begin_layout Standard
Return the character number of the first character of a string:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Character number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
BAIL
\end_layout

\begin_layout Standard
Return immediately from a code block, to the nearest code block whose execution
 is not yet complete.
\end_layout

\begin_layout Paragraph*
BEVAL
\end_layout

\begin_layout Standard
BAIL and then EVAL.
 Stack requirements and results are identical to EVAL.
\end_layout

\begin_layout Paragraph*
>BIN
\end_layout

\begin_layout Standard
Prepare a built-in object.
 The dispatch table is built as follows:
\end_layout

\begin_layout LyX-Code
{ { dispatch-object object-type (object-type...) }
\end_layout

\begin_layout LyX-Code
  or
\end_layout

\begin_layout LyX-Code
  { symbol object-type (object-type...) }
\end_layout

\begin_layout LyX-Code
  ...
 }
\end_layout

\begin_layout Standard
where the code to execute is the first object of each sub-list, and the
 remaining values are the integer types for the arguments on the stack (or
 #0 if any type is acceptable.) When called, a built-in tests the stack arguments
 and dispatches to the first matching line of this table.
 Any objects after the argument types are ignored, and can be used for comments.
 If the dispatch object is a symbol, it is recalled by >BIN.
 Symbols evaluating to valid integers are also permitted for object-type
 fields, so for example, Types.String is an acceptable object type.
\end_layout

\begin_layout Standard
The name does not have to match the name the resulting object is stored
 into, nor does the object have to be stored to be evaluated; however, if
 an argument-checking error occurs, it will be attributed to the name given
 here, and it's the name shown when this object is displayed.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dispatch table
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Documentation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quoted symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Built-in
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
BRKSST
\end_layout

\begin_layout Standard
By default, ^C will start a traceback.
 For debugging purposes, it can be useful to have it enter single step mode
 instead.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\emph on
single step on break
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\emph on
trace back on break
\end_layout

\begin_layout Paragraph*
CASE
\end_layout

\begin_layout Standard
Effectively a nested IFTE, CASE evaluates test objects in order and then
 evaluates the first matching result object.
 It takes a list of the form:
\end_layout

\begin_layout LyX-Code
{ { if-case then-case }
\end_layout

\begin_layout LyX-Code
  { if-case then-case }
\end_layout

\begin_layout LyX-Code
  ...
 }
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CASE block
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
See also the slightly modified KCASE, which accepts and supplies a constant
 test value.
\end_layout

\begin_layout Paragraph*
CLR
\end_layout

\begin_layout Standard
Clear both the data and call stacks and return to the first REPL, if any.
\end_layout

\begin_layout Paragraph*
DED
\end_layout

\begin_layout Standard
Invoke the interpreter's error handler:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Caller name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\emph on
error
\end_layout

\begin_layout Paragraph*
DEDCONT
\end_layout

\begin_layout Standard
Control the behavior of the interpreter's error handler.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\emph on
continue execution on error
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\emph on
trace back on error
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

All normal runtime errors, including ^C breaks, are suppressed if continuation
 is enabled.
 Errors can be checked with ISDED, and parse errors will still be printed.
 Reasonable persons will leave this setting in its default state.
\end_layout

\begin_layout Paragraph*
DEREF
\end_layout

\begin_layout Standard
Return the tag (reference) for the closest name:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>DIR
\end_layout

\begin_layout Standard
Prepare a new, unlinked directory entry object.
 This directory entry can be further manipulated on the stack, or can be
 stored to create a new subdirectory:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to store
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory entry
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
DIR
\end_layout

\begin_layout Standard
Return a list of symbol names from a subdirectory.
 (see also: NAMES)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory entry
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Names as unquoted symbols
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
DISP
\end_layout

\begin_layout Standard
Display the printable form of any object:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to display
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
DISPN
\end_layout

\begin_layout Standard
Display the printable form of any object, but suppress a newline:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to display
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
DOC
\end_layout

\begin_layout Standard
Display information about a built-in, such as hints and information about
 valid stack frames.
 A symbol is also acceptable:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol, Built-in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object of interest
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
DROP
\end_layout

\begin_layout Standard
Pop the first line from the stack and discard:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
>DSK
\end_layout

\begin_layout Standard
Recall a quoted symbol and record to disk, such that a subsequent DSK> will
 store the object back to that name:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination filename
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or record any other object type to disk:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination filename
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Only the printable form of an object is recorded, so direct memory references
 such as directory entries and built-ins will revert to symbols.
\end_layout

\begin_layout Paragraph*
DSK>
\end_layout

\begin_layout Standard
Read a file from disk and pass it to the parser.
 This is equivalent to typing directly into the REPL, except that line breaks
 are allowed and any amount of data up to the interpreter's limit (currently
 256KiB) can be read.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source filename
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
DUP
\end_layout

\begin_layout Standard
Duplicate the first line of the stack:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
EPOCH
\end_layout

\begin_layout Standard
Return current UNIX time (seconds since January 1, 1970, 00:00 UTC):
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current epoch time
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
EVAL
\end_layout

\begin_layout Standard
Evaluate an object:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code, built-in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ execute code
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ recall symbol and evaluate
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any other
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
EXISTS
\end_layout

\begin_layout Standard
Determine whether a symbol exists in the named store:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean result
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>FLOAT
\end_layout

\begin_layout Standard
Convert an object to a float:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer, float, string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
FOREACH
\end_layout

\begin_layout Standard
For each object in code or a list on line 2, supply that object on the stack
 and evaluate against the object on line 1.
 Objects within the list can be updated using the local symbol 'update':
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluator
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination list
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>FUNC
\end_layout

\begin_layout Standard
Convert a string or quoted symbol into an unquoted symbol:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, symbol, function
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unquoted symbol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
GET
\end_layout

\begin_layout Standard
Fetch an object from code or a list:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index (from zero)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fetched object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Or fetch a single character from a string:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index (from zero)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fetched character
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
HAS
\end_layout

\begin_layout Standard
Check to see if a list contains something like an item, using the same rules
 as ==:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Item to check
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean result
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
HOOK
\end_layout

\begin_layout Standard
Modify a built-in object by adding new lines to its dispatch table.
 The table structure is identical to that used by >BIN, and is prepended
 to the table already in use.
 The built-in is modified in place rather than issuing a new object, and
 it is also returned to the stack.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dispatch table
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Built-in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to modify
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Built-in
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
IFT
\end_layout

\begin_layout Standard
Conditionally evaluate an object.
 If line 2 is true (typically if it's a nonzero number), evaluate line 1,
 otherwise can it.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to evaluate if true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
IFTE
\end_layout

\begin_layout Standard
Conditionally evaluate an object.
 If line 3 is true (typically if it's a nonzero number), evaluate line 2,
 otherwise evaluate line 1.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Condition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to evaluate if true
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object to evaluate if false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
INT
\end_layout

\begin_layout Standard
Convert an object to an integer:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number, string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
IP
\end_layout

\begin_layout Standard
Return the integer portion of a number:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
ISDED
\end_layout

\begin_layout Standard
Return information about the interpreter's error state.
 This is only meaningful in concert with DEDCONT and UNDED.
 If an untrapped error has occurred, the complainant is recorded and the
 error state is true:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source of most recent error
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean error state (#1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
If no error has occurred, no string is returned:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boolean error state (#0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
KCASE
\end_layout

\begin_layout Standard
Constant CASE.
 For each test case, a constant is supplied; it's also available within
 the test case as the local variable _k:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constant object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CASE block (see CASE)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
LEN
\end_layout

\begin_layout Standard
Return the length of an object:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Length
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
LEFT
\end_layout

\begin_layout Standard
Return entries from the beginning of a string or composite object (see also
 RIGHT, SUBS):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of entries
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subset
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
LOCAL
\end_layout

\begin_layout Standard
Execute code with local variables:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n
\emph default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Local variable 
\emph on
n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Local variable 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Local environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Local variable names
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ execute line 2
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Each name is stored in order, so the list takes the form:
\end_layout

\begin_layout LyX-Code
{ variable-1 ...
 variable-
\emph on
n
\emph default
 }
\end_layout

\begin_layout Standard
Tags can also be included anywhere in the list, and will store the name
 and value without pulling from the stack.
 Be aware: tail call optimization can cause local variables to unexpectedly
 linger, depending upon where LOCAL is called in relation to the end of
 a code block.
 To force a new context for a LOCAL at the end of a code block, placing
 a comment after LOCAL will suffice.
\end_layout

\begin_layout Paragraph*
>LST
\end_layout

\begin_layout Standard
Create a list from items on the stack:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of entries
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
MKDIR
\end_layout

\begin_layout Standard
Create a new, empty directory:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
NAMES
\end_layout

\begin_layout Standard
Return a list of currently stored symbol names, including local variables:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Available names as unquoted symbols
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
NEG
\end_layout

\begin_layout Standard
Negate a number:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer, float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0 - integer, float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
NOT
\end_layout

\begin_layout Standard
Logical NOT, returning #1 if number is zero and #0 if it's nonzero:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>OBJ
\end_layout

\begin_layout Standard
Pass a string to the parser:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source text
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First parsed object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last parsed object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
OBJ>
\end_layout

\begin_layout Standard
Break apart a composite object and return its contents to the stack:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code, list
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
n.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object count
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or return the innards of a tag:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stored object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
OR
\end_layout

\begin_layout Standard
Logical OR, returning #1 if either number is nonzero:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
POP
\end_layout

\begin_layout Standard
Pop the last object off a list:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List minus popped object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
PROMPT
\end_layout

\begin_layout Standard
Read a line from the console:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User-entered text
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
PUT
\end_layout

\begin_layout Standard
Store an object to code or a list:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destination
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index (from zero)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
RCL
\end_layout

\begin_layout Standard
Recall an object to the stack from the named store:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or recall an object from a directory entry:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory entry
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
REP
\end_layout

\begin_layout Standard
Repeatedly evaluate code until it returns zero:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
RIGHT
\end_layout

\begin_layout Standard
Return entries from the end of a string or composite object (see also LEFT,
 SUBS):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of entries
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subset
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
RM
\end_layout

\begin_layout Standard
Remove a symbol from the named store:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
RND
\end_layout

\begin_layout Standard
Return a random number between 0 and 1:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Random number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Paragraph*
SELF
\end_layout

\begin_layout Standard
Return the currently-running code object:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
SST
\end_layout

\begin_layout Standard
Begin single stepping debug mode.
\end_layout

\begin_layout Paragraph*
SSTOFF
\end_layout

\begin_layout Standard
End single stepping debug mode.
\end_layout

\begin_layout Paragraph*
STACK
\end_layout

\begin_layout Standard
Return the entire contents of the stack:
\end_layout

\begin_layout Standard
⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stack contents
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
STATIC
\end_layout

\begin_layout Standard
Recursively rummage through list or code and scrutinize all unquoted symbols
 found therein.
 If a symbol currently resolves to a built-in, it is replaced with a direct
 reference, which prevents local names from pre-empting it but greatly speeds
 execution.
 Any symbols in the exclusion list remain untouched:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol exclusion list
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List, code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
STO
\end_layout

\begin_layout Standard
Store an object into the named store:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quoted symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Or store an object into a directory entry:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory entry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
>STR
\end_layout

\begin_layout Standard
Return the string representation of an object.
 This is the corollary to >OBJ, and like >DSK, is limited in that things
 like directory entries and built-ins revert to symbols when parsed again:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printable representation
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
SUBS
\end_layout

\begin_layout Standard
Return a subset of a string or composite object (see also RIGHT, LEFT):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lower subscript
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Higher subscript
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, list, code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subset
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
SWAP
\end_layout

\begin_layout Standard
Exchange two lines of the stack:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Source object 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>SYM
\end_layout

\begin_layout Standard
Convert a string or unquoted symbol into a quoted symbol:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String, symbol, function
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
>TAG
\end_layout

\begin_layout Standard
Create a new tag from an object any a symbol.
 The symbol cannot contain a period:
\end_layout

\begin_layout Standard
Or return the innards of a tag:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soure object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tag
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
TRACE
\end_layout

\begin_layout Standard
Set the number of running code blocks to leave on the call stack in case
 of an error.
 Normally this is set to 1 in an interactive session, so the furthest a
 traceback can unwind is to return to the REPL.
 If a program is loaded from the commandline, it's normally set to 0 to
 trace back all the way and exit.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Traceback stopping point
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒
\end_layout

\begin_layout Paragraph*
TYPE
\end_layout

\begin_layout Standard
Return the type number of an object:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
UNDED
\end_layout

\begin_layout Standard
Clear the interpreter's error state.
 This is only meaningful in concert with DEDCONT.
\end_layout

\begin_layout Paragraph*
VAL
\end_layout

\begin_layout Standard
Return the number represented by a string, and zero if the string can't
 be parsed:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 ⇒ 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parsed value
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
